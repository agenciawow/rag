#!/usr/bin/env python3
"""
Script para testar conex√µes com os bancos de dados e funcionalidades do RAG
"""

import os
import sys
from dotenv import load_dotenv

# Carrega vari√°veis de ambiente
load_dotenv()

def test_vector_database():
    """Testa conex√£o com o banco vetorial"""
    print("üîç Testando conex√£o com banco vetorial...")
    
    try:
        from astrapy import DataAPIClient
        
        endpoint = os.getenv("VECTOR_DB_API_ENDPOINT")
        token = os.getenv("VECTOR_DB_TOKEN")
        
        if not endpoint or not token:
            print("‚ùå Vari√°veis VECTOR_DB_API_ENDPOINT ou VECTOR_DB_TOKEN n√£o encontradas")
            return False
            
        print(f"   Endpoint: {endpoint}")
        print(f"   Token: {token[:20]}...")
        
        # Conecta ao banco vetorial
        client = DataAPIClient(token)
        database = client.get_database_by_api_endpoint(endpoint)
        
        # Lista collections
        collections = database.list_collection_names()
        print(f"   Collections encontradas: {collections}")
        
        # Testa collection pdf_documents
        if "pdf_documents" in collections:
            collection = database.get_collection("pdf_documents")
            # Usa estimated_document_count ao inv√©s de count_documents
            count = collection.estimated_document_count()
            print(f"   Documentos na collection: {count}")
        else:
            print("   Collection 'pdf_documents' n√£o encontrada")
            
        print("‚úÖ Conex√£o com banco vetorial: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na conex√£o com banco vetorial: {e}")
        return False

def test_user_management():
    """Testa gerenciamento local de usu√°rios"""
    print("\nüë§ Testando gerenciamento de usu√°rios...")
    
    try:
        from manage_production_users import ProductionUserManager
        import os
        
        # Testa se o arquivo de usu√°rios existe
        user_file = "production_users.json"
        if os.path.exists(user_file):
            print(f"   Arquivo de usu√°rios encontrado: {user_file}")
        else:
            print(f"   Arquivo de usu√°rios ser√° criado: {user_file}")
        
        # Testa inicializa√ß√£o do gerenciador
        user_manager = ProductionUserManager()
        print(f"   Usu√°rios carregados: {len(user_manager.users)}")
        
        # Testa diret√≥rio de mem√≥rias
        memory_dir = "production_users"
        if os.path.exists(memory_dir):
            user_dirs = [d for d in os.listdir(memory_dir) if os.path.isdir(os.path.join(memory_dir, d))]
            print(f"   Diret√≥rios de usu√°rios: {len(user_dirs)}")
        else:
            print(f"   Diret√≥rio de mem√≥rias ser√° criado: {memory_dir}")
        
        print("‚úÖ Gerenciamento local de usu√°rios: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no gerenciamento de usu√°rios: {e}")
        return False

def test_rag_system():
    """Testa o sistema RAG completo"""
    print("\nü§ñ Testando sistema RAG...")
    
    try:
        from buscador_conversacional_producao import ProductionConversationalRAG
        
        # Inicializa o sistema RAG
        rag = ProductionConversationalRAG()
        print("‚úÖ Sistema RAG inicializado com sucesso")
        
        # Testa uma busca simples
        print("   Testando busca...")
        response = rag.ask("teste de conex√£o")
        print(f"   Resposta recebida: {len(response)} caracteres")
        print("‚úÖ Busca RAG: OK")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no sistema RAG: {e}")
        return False

def test_indexing():
    """Testa a funcionalidade de indexa√ß√£o"""
    print("\nüìö Testando indexa√ß√£o...")
    
    try:
        from indexador import validate_env_vars, connect_to_astra, get_config
        
        # Valida vari√°veis de ambiente
        validate_env_vars()
        print("‚úÖ Vari√°veis de ambiente para indexa√ß√£o: OK")
        
        # Testa conex√£o
        config = get_config()
        collection = connect_to_astra(config)
        print("‚úÖ Conex√£o para indexa√ß√£o: OK")
        
        # Verifica se pode acessar a collection
        count = collection.estimated_document_count()
        print(f"   Documentos indexados: {count}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro na indexa√ß√£o: {e}")
        return False

def main():
    """Executa todos os testes"""
    print("üöÄ INICIANDO TESTES DO SISTEMA RAG")
    print("=" * 50)
    
    results = {
        "vector_db": test_vector_database(),
        "user_management": test_user_management(), 
        "indexing": test_indexing(),
        "rag_system": test_rag_system()
    }
    
    print("\n" + "=" * 50)
    print("üìä RESUMO DOS TESTES:")
    
    all_passed = True
    for test_name, result in results.items():
        status = "‚úÖ PASSOU" if result else "‚ùå FALHOU"
        print(f"   {test_name:15}: {status}")
        if not result:
            all_passed = False
    
    print("\n" + "=" * 50)
    if all_passed:
        print("üéâ TODOS OS TESTES PASSARAM! Sistema funcionando corretamente.")
    else:
        print("‚ö†Ô∏è ALGUNS TESTES FALHARAM. Verifique os erros acima.")
        sys.exit(1)

if __name__ == "__main__":
    main()